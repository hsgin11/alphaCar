<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.prod.dao.IProdDao">

	<sql id="search">
	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchWord)">
			AND prod_name LIKE '%'|| #{searchWord} || '%'	
	</if><!-- @클래스풀네임 @메소드이름(파라미터) -->		
	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(searchCategory)">
			AND prod_category LIKE '%'|| #{searchCategory} || '%'	
	</if>
</sql>

	<select id="getProdCount" resultType="int">
		SELECT COUNT(*) FROM prod 
		WHERE 1=1	
		<include refid="search"></include>
	</select>


	<select id="getProdList" resultType="com.study.prod.vo.ProdVO" parameterType="com.study.prod.vo.ProdSearchVO">
	SELECT  * FROM (						               
		SELECT  a.*, rownum AS rnum 
		FROM (    
			select * 
			from prod 
			WHERE 1=1	
			<include refid="search"></include>
		) a	) b	
	WHERE rnum between #{firstRow} AND #{lastRow}     
	</select>
	
	<select id="getProdListByCategory" parameterType="String" resultType="com.study.prod.vo.ProdVO">
	<![CDATA[
	select t3.*
    from
    (
    select t1.*, row_number() over(order by nvl(t2.rating, 0) desc) as rnum
	from
	(
	    SELECT a.*
	    FROM prod a
	    WHERE prod_category = #{prodCategory}
	) t1,
    (
	    SELECT b.prod_no,avg(b.rating) as rating
	    FROM rating b
	    group by b.prod_no
    ) t2
	where t1.prod_no = t2.prod_no(+)
    ) t3
    WHERE t3.rnum <= 5
	]]>
	
	</select>
	
	
	
	
	
	
	<select id="getProd" parameterType="int" resultType="com.study.prod.vo.ProdVO">
	SELECT * 
	FROM prod
	WHERE prod_no = #{prodNo}
	
	
	
	</select>
	<select id="getOptions" parameterType="int" resultType="com.study.prod.vo.OptionVO">
	select 
    	b.*
	from 
	    prod a,prod_option b
	where
	    a.prod_no = b.prod_no
	and b.prod_no = #{prodNo}
	
	</select>
	<select id="getOption" resultType="com.study.prod.vo.OptionVO" parameterType="HashMap">
	
	select * from prod_option where prod_no = #{prodNo} and option_no = #{optionNo}
	
	
	</select>
	
		<select id="getSellerCount" resultType="int">
		SELECT COUNT(*) FROM prod 
		WHERE prod_seller = #{prodSeller}	
	</select>
	
<!-- 판매자 페이지 상품리스트 -->
<select id="getSellerList" resultType="com.study.prod.vo.ProdVO" parameterType="com.study.prod.vo.ProdSearchVO">
	SELECT  * FROM (						               
		SELECT  a.*, rownum AS rnum 
		FROM (    
			select * 
			from prod 
			WHERE prod_seller = #{prodSeller}	
		) a	) b	
	WHERE rnum between #{firstRow} AND #{lastRow} 
</select>

	<!-- 상품 등록 -->
<insert id="sellerRegist">
	<selectKey keyProperty="prodNo" order="BEFORE" resultType="int">
		SELECT seq_prod_no.nextval FROM dual 
	</selectKey>
INSERT INTO prod (
    prod_file_name
    , prod_name
    , prod_price
    , prod_seller
    , prod_no
    , prod_category
) VALUES (
    #{prodFileName}
    , #{prodName}
    , #{prodPrice}
    , #{prodSeller}
    , #{prodNo}
    , #{prodCategory}
)
</insert>
<!-- 옵션등록 -->
	<insert id="insertOption" parameterType="com.study.prod.vo.OptionVO">
		INSERT INTO prod_option (
		    option_no
		    , prod_no
		    , option_name
		    , option_price
		) VALUES (
		<![CDATA[
		      #{optionNo}
		    ,  #{prodNo}
		    , #{optionName}
		    , #{optionPrice}
		]]>    
		)
		</insert>
	
	<update id="updateProd" parameterType="com.study.prod.vo.ProdVO">
		update prod set
		prod_name = #{prodName}
	   ,prod_price = #{prodPrice}
	   ,prod_category = #{prodCategory}
	   where prod_no = #{prodNo}
	</update>
	
	<insert id="getRating" parameterType="com.study.prod.vo.RatingVO">
		INSERT INTO rating (
     prod_no
    , rating
    , prod_comment
    , user_id
) VALUES (
    
     #{prodNo}
    , #{rating}
    , #{prodComment}
    , #{userId}
)
	</insert>
	<delete id="sellerDelete" parameterType="com.study.prod.vo.ProdVO">
		DELETE FROM prod WHERE prod_no = #{prodNo}
		
	</delete>
	<delete id="deleteOption" parameterType="com.study.prod.vo.ProdVO">
		DELETE FROM prod_option WHERE prod_no = #{prodNo}
	</delete>
	<select id="getStar" parameterType="int" resultType="double">
		select to_char(nvl(avg(rating),0),'0.0')

			from rating
			where prod_no= #{prodNo}
		
</select>
	<select id="getCommentCount" parameterType="com.study.prod.vo.CommentSearchVO" resultType="int">
		select count(*) from rating	where prod_no = #{prodNo} 
	</select>


	<select id="getCommentList" parameterType="com.study.prod.vo.CommentSearchVO" resultType="com.study.prod.vo.RatingVO">
	
		<include refid="common.prePaging"></include>
	select * 
	from rating 
	where prod_no = #{prodNo} 
	order by rating desc
	<include refid="common.postPaging"></include>
	
	</select>

</mapper>